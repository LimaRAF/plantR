% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strLoc.R
\name{strLoc}
\alias{strLoc}
\title{Construct Locality String}
\usage{
strLoc(x)
}
\arguments{
\item{x}{a data frame.}
}
\value{
A data frame with the locality fields provided in \code{x} and the
  locality strings constructed ('loc.string', 'loc.string1' and
  'loc.string2').
}
\description{
Combine locality fields to create the standard plantR locality string
}
\details{
The function combines the information provided in the locality fields to create
a standard string that `plantR` uses to retrieve information from gazetteers. This string
is built by concatenating the country, state, municipality and locality fields at
the best resolution available. This hierarchical format decreases the chances of retrieving
information from localities with the same names in different regions. The standard gazetteer
provided with `plantR` uses this standard locality string to make queries (see `plantR`
function `getLoc` for details).

The input data frame should preferably be the output of the `plantR` function
`fixLoc`, as part of the validation workflow used by `plantR`. This function
returns the edited standard locality fields (i.e. country.new,
stateProvince.new, municipality.new, and locality.new) and, if chosen, the
extra locality field 'locality.scrap'. In this case, `strLoc`
also returns an alternative string ('loc.string2').

If used separately, users must provide a data frame with an specific set of
column names (i.e. country.new, stateProvince.new, municipality.new,
locality.new, and, if chosen, locality.scrap). See the
examples below.
}
\examples{

## Using the function separately (need to provide a data in a specific format)
# Creating a data frame with locality information
(occs.new <- data.frame(country.new = c("brazil", "brazil", "brazil"),
                     stateProvince.new = c("rio de janeiro", "rio de janeiro", "rio de janeiro"),
                     municipality.new = c("parati", "paraty", "paraty"),
                     locality.new = c(NA,"paraty-mirim", NA),
                     locality.scrap = c(NA, NA, "trindade")
                     ))
# Creating locality strings used to query the gazetteer
strLoc(occs.new)


## Using the function under the `plantR` cleaning workflow
# Creating a data frame with locality information
(occs <- data.frame(country = c("BR", "Brazil", "Brasil"),
                     stateProvince = c("RJ", "Rio de Janeiro", "Rio de Janeiro"),
                     municipality = c("Parati", "Paraty", "Paraty"),
                     locality = c(NA,"Paraty-Mirim", "Trindade")
                     ))

# Formating the locality information
occs.fix <- fixLoc(occs)

# Creating locality strings used to query the gazetteer
strLoc(occs.fix)


}
\author{
Renato A. F. de Lima
}
